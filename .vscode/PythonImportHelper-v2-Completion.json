[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "library.migrations.0001_initial",
        "description": "library.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Author',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "library.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "LibraryConfig",
        "kind": 6,
        "importPath": "library.apps",
        "description": "library.apps",
        "peekOfCode": "class LibraryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'library'",
        "detail": "library.apps",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "library.models",
        "description": "library.models",
        "peekOfCode": "class Author(models.Model):\n    name = models.CharField(max_length=255)\n    biography = models.TextField()\n    def __str__(self):\n        return self.name\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    isbn = models.CharField(max_length=20)\n    category = models.CharField(max_length=100)",
        "detail": "library.models",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "library.models",
        "description": "library.models",
        "peekOfCode": "class Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    isbn = models.CharField(max_length=20)\n    category = models.CharField(max_length=100)\n    availability_status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.title\nclass Member(models.Model):\n    name = models.CharField(max_length=255)",
        "detail": "library.models",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "library.models",
        "description": "library.models",
        "peekOfCode": "class Member(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    membership_date = models.DateField()\n    def __str__(self):\n        return self.name\nclass BorrowRecord(models.Model):\n    book = models.ForeignKey(Book, on_delete=models.CASCADE)\n    member = models.ForeignKey(Member, on_delete=models.CASCADE)\n    borrow_date = models.DateField()",
        "detail": "library.models",
        "documentation": {}
    },
    {
        "label": "BorrowRecord",
        "kind": 6,
        "importPath": "library.models",
        "description": "library.models",
        "peekOfCode": "class BorrowRecord(models.Model):\n    book = models.ForeignKey(Book, on_delete=models.CASCADE)\n    member = models.ForeignKey(Member, on_delete=models.CASCADE)\n    borrow_date = models.DateField()\n    return_date = models.DateField(null=True, blank=True)\n    def __str__(self):\n        return f\"{self.member.name} borrowed {self.book.title}\"",
        "detail": "library.models",
        "documentation": {}
    },
    {
        "label": "IsLibrarian",
        "kind": 6,
        "importPath": "library.permissions",
        "description": "library.permissions",
        "peekOfCode": "class IsLibrarian(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_staff\nclass IsMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated and not request.user.is_staff\nclass IsLibrarianOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if request.method in permissions.SAFE_METHODS:\n            return True",
        "detail": "library.permissions",
        "documentation": {}
    },
    {
        "label": "IsMember",
        "kind": 6,
        "importPath": "library.permissions",
        "description": "library.permissions",
        "peekOfCode": "class IsMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated and not request.user.is_staff\nclass IsLibrarianOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return request.user.is_staff",
        "detail": "library.permissions",
        "documentation": {}
    },
    {
        "label": "IsLibrarianOrReadOnly",
        "kind": 6,
        "importPath": "library.permissions",
        "description": "library.permissions",
        "peekOfCode": "class IsLibrarianOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return request.user.is_staff",
        "detail": "library.permissions",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class UserCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'password',\n                  'email', 'first_name', 'last_name')\n        extra_kwargs = {'password': {'write_only': True}}\n    def create(self, validated_data):\n        password = validated_data.pop('password', None)\n        instance = self.Meta.model(**validated_data)\n        if password is not None:",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name')\nclass AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = '__all__'\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "AuthorSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = '__all__'\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\nclass MemberSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "BookSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\nclass MemberSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Member\n        fields = '__all__'\nclass BorrowRecordSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "MemberSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class MemberSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Member\n        fields = '__all__'\nclass BorrowRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BorrowRecord\n        fields = '__all__'",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "BorrowRecordSerializer",
        "kind": 6,
        "importPath": "library.serializers",
        "description": "library.serializers",
        "peekOfCode": "class BorrowRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BorrowRecord\n        fields = '__all__'",
        "detail": "library.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "library.urls",
        "description": "library.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'books', BookViewSet)\nrouter.register(r'authors', AuthorViewSet)\nrouter.register(r'members', MemberViewSet)\nrouter.register(r'borrowrecords', BorrowRecordViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('borrow/', borrow_book, name='borrow_book'),\n    path('return/', return_book, name='return_book'),\n]",
        "detail": "library.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "library.urls",
        "description": "library.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('borrow/', borrow_book, name='borrow_book'),\n    path('return/', return_book, name='return_book'),\n]",
        "detail": "library.urls",
        "documentation": {}
    },
    {
        "label": "BookViewSet",
        "kind": 6,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "class BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    permission_classes = [IsLibrarianOrReadOnly]\nclass AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    permission_classes = [IsLibrarian]\nclass MemberViewSet(viewsets.ModelViewSet):\n    queryset = Member.objects.all()",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "AuthorViewSet",
        "kind": 6,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "class AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    permission_classes = [IsLibrarian]\nclass MemberViewSet(viewsets.ModelViewSet):\n    queryset = Member.objects.all()\n    serializer_class = MemberSerializer\n    permission_classes = [IsLibrarian]\nclass BorrowRecordViewSet(viewsets.ModelViewSet):\n    queryset = BorrowRecord.objects.all()",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "MemberViewSet",
        "kind": 6,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "class MemberViewSet(viewsets.ModelViewSet):\n    queryset = Member.objects.all()\n    serializer_class = MemberSerializer\n    permission_classes = [IsLibrarian]\nclass BorrowRecordViewSet(viewsets.ModelViewSet):\n    queryset = BorrowRecord.objects.all()\n    serializer_class = BorrowRecordSerializer\n    permission_classes = [permissions.IsAuthenticated]\n@api_view(['POST'])\n@permission_classes([IsMember])",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "BorrowRecordViewSet",
        "kind": 6,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "class BorrowRecordViewSet(viewsets.ModelViewSet):\n    queryset = BorrowRecord.objects.all()\n    serializer_class = BorrowRecordSerializer\n    permission_classes = [permissions.IsAuthenticated]\n@api_view(['POST'])\n@permission_classes([IsMember])\ndef borrow_book(request):\n    serializer = BorrowRecordSerializer(data=request.data)\n    if serializer.is_valid():\n        book_id = request.data.get('book')",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "borrow_book",
        "kind": 2,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "def borrow_book(request):\n    serializer = BorrowRecordSerializer(data=request.data)\n    if serializer.is_valid():\n        book_id = request.data.get('book')\n        try:\n            book = Book.objects.get(pk=book_id)\n            if not book.availability_status:\n                return Response({'error': 'Book is not available for borrowing.'}, status=status.HTTP_400_BAD_REQUEST)\n            book.availability_status = False\n            book.save()",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "return_book",
        "kind": 2,
        "importPath": "library.views",
        "description": "library.views",
        "peekOfCode": "def return_book(request):\n    book_id = request.data.get('book')\n    member_id = request.data.get('member')\n    try:\n        borrow_record = BorrowRecord.objects.filter(\n            book_id=book_id, member_id=member_id, return_date__isnull=True).latest('borrow_date')\n        borrow_record.return_date = request.data.get('return_date')\n        borrow_record.save()\n        book = Book.objects.get(pk=book_id)\n        book.availability_status = True",
        "detail": "library.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "practicemodule.asgi",
        "description": "practicemodule.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "practicemodule.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-ppu98%dfk0gz-$vaim84d0p*&w@-fo56_ewxhaau_d=gxe-_!l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-ppu98%dfk0gz-$vaim84d0p*&w@-fo56_ewxhaau_d=gxe-_!l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'drf_yasg',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'drf_yasg',\n    'rest_framework_simplejwt',\n    'djoser',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'practicemodule.urls'",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "ROOT_URLCONF = 'practicemodule.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "WSGI_APPLICATION = 'practicemodule.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nAUTH_USER_MODEL = 'auth.User'  # Important",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nAUTH_USER_MODEL = 'auth.User'  # Important\nDJOSER = {\n    'SERIALIZERS': {\n        'user_create': 'library.serializers.UserCreateSerializer',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nAUTH_USER_MODEL = 'auth.User'  # Important\nDJOSER = {\n    'SERIALIZERS': {\n        'user_create': 'library.serializers.UserCreateSerializer',\n        'user': 'library.serializers.UserSerializer',",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'auth.User'  # Important\nDJOSER = {\n    'SERIALIZERS': {\n        'user_create': 'library.serializers.UserCreateSerializer',\n        'user': 'library.serializers.UserSerializer',\n        'current_user': 'library.serializers.UserSerializer',\n    },\n    'JWT_AUTH_REFRESH_TOKEN_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',\n}\nSIMPLE_JWT = {",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "DJOSER",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "DJOSER = {\n    'SERIALIZERS': {\n        'user_create': 'library.serializers.UserCreateSerializer',\n        'user': 'library.serializers.UserSerializer',\n        'current_user': 'library.serializers.UserSerializer',\n    },\n    'JWT_AUTH_REFRESH_TOKEN_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "practicemodule.settings",
        "description": "practicemodule.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n}",
        "detail": "practicemodule.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "practicemodule.urls",
        "description": "practicemodule.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Library Management\",\n        default_version='v1',\n        description=\"API Documentation for Library Management - Here All API endpoints you get here\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@snippets.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "practicemodule.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "practicemodule.urls",
        "description": "practicemodule.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('library.urls')),\n    path('swagger/', schema_view.with_ui('swagger',\n         cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc',\n         cache_timeout=0), name='schema-redoc'),\n    path('auth/', include('djoser.urls')),\n    path('auth/', include('djoser.urls.jwt')),\n]",
        "detail": "practicemodule.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "practicemodule.wsgi",
        "description": "practicemodule.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "practicemodule.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'practicemodule.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]